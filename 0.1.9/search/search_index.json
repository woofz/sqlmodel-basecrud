{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SQLModel BaseCRUD Simple package that provides base CRUD operations for your models. What is SQLModel BaseCRUD? With SQLModel BaseCRUD, you can implement your CRUD operations easily in your project. It is simple as declaring a variable! This package consists in two classes: BaseCRUD and BaseRepository . BaseCRUD is the basic class that implements the basic CRUD operations, while BaseRepository is the repository used to execute those operations. You could also write your own repository class and use basic CRUD operation provided by BaseRepository class by extending it to your own repository class! Installation Using pip pip install sqlmodel-basecrud Using poetry poetry add sqlmodel-basecrud Usage Basic setup Consider these two models as example: class Team(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) name: str = Field(index=True) headquarters: str heroes: List[\"Hero\"] = Relationship(back_populates=\"team\") class Hero(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) name: str = Field(index=True) secret_name: str age: Optional[int] = Field(default=None, index=True) team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") team: Optional[Team] = Relationship(back_populates=\"heroes\") We want to perform some operations on these models. First of all we instantiate a BaseRepository , specifying the database session and the model that we want to manipulate. # other imports.. from sqlmodel_basecrud import BaseRepository with Session(engine) as session: hero_repository = BaseRepository(db=session, model=Hero) team_repository = BaseRepository(db=session, model=Team) CREATE operation Persists an item into the database. # CREATE operation my_hero = Hero(name='Github Hero', secret_name='Gitty', age=31) hero_repository.create(my_hero) # now my_hero is persisting in the database! BULK CREATE operation Persists multiple items into the database. You have to pass them in a list. # BULK CREATE operation my_heros_list = [ Hero(name='Github Hero', secret_name='Gitty', age=31), Hero(name='Hero 2', secret_name='Hero2', age=21), Hero(name='Hero 3', secret_name='Hero3', age=29) ] hero_repository.bulk_create(my_heros_list) GET operation GET operation simply gets a single record from the database. result = hero_repository.get(id=1, name='Github Hero') result variable will be an instance of Hero, if a result matches the criteria, or None type. FILTER operation Gets one or more instances from the database, filtering them by one or more column/s. results = hero_repository.filter(age=31) results will be a List with zero or more elements. GET ALL operation Gets all instances of given module from the Database results = hero_repository.get_all() results will be a List with zero or more elements. UPDATE operation Updates a record into the database. instance_to_update = hero_repository.get(id=1) instance_to_update.name = 'Super New Name' instance_to_update.age = 27 hero_repository.update(instance_to_update) The hero will have his columns name and age with updated values. DELETE operation Removes an instance from the database instance_to_remove = hero_repository.get(id=1) hero_repository.delete(instance_to_remove) The instance will be removed from the database. Custom Repository If you want to extend the BaseRepository class with some custom methods, you can write your own repository class. Just extend BaseRepository or BaseCRUD class and call the super class constructor, by passing it two essential parameters: db : must be a Session instance; model : must be a Type[SQLModel]. from sqlmodel_basecrud import BaseRepository class MyCustomRepository(BaseRepository): def __init__(self, db: Session, model: Type[SQLModel]): super().__init__(model=model, db=db)","title":"SQLModel BaseCRUD"},{"location":"#sqlmodel-basecrud","text":"Simple package that provides base CRUD operations for your models.","title":"SQLModel BaseCRUD"},{"location":"#what-is-sqlmodel-basecrud","text":"With SQLModel BaseCRUD, you can implement your CRUD operations easily in your project. It is simple as declaring a variable! This package consists in two classes: BaseCRUD and BaseRepository . BaseCRUD is the basic class that implements the basic CRUD operations, while BaseRepository is the repository used to execute those operations. You could also write your own repository class and use basic CRUD operation provided by BaseRepository class by extending it to your own repository class!","title":"What is SQLModel BaseCRUD?"},{"location":"#installation","text":"","title":"Installation"},{"location":"#using-pip","text":"pip install sqlmodel-basecrud","title":"Using pip"},{"location":"#using-poetry","text":"poetry add sqlmodel-basecrud","title":"Using poetry"},{"location":"#usage","text":"","title":"Usage"},{"location":"#basic-setup","text":"Consider these two models as example: class Team(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) name: str = Field(index=True) headquarters: str heroes: List[\"Hero\"] = Relationship(back_populates=\"team\") class Hero(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) name: str = Field(index=True) secret_name: str age: Optional[int] = Field(default=None, index=True) team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") team: Optional[Team] = Relationship(back_populates=\"heroes\") We want to perform some operations on these models. First of all we instantiate a BaseRepository , specifying the database session and the model that we want to manipulate. # other imports.. from sqlmodel_basecrud import BaseRepository with Session(engine) as session: hero_repository = BaseRepository(db=session, model=Hero) team_repository = BaseRepository(db=session, model=Team)","title":"Basic setup"},{"location":"#create-operation","text":"Persists an item into the database. # CREATE operation my_hero = Hero(name='Github Hero', secret_name='Gitty', age=31) hero_repository.create(my_hero) # now my_hero is persisting in the database!","title":"CREATE operation"},{"location":"#bulk-create-operation","text":"Persists multiple items into the database. You have to pass them in a list. # BULK CREATE operation my_heros_list = [ Hero(name='Github Hero', secret_name='Gitty', age=31), Hero(name='Hero 2', secret_name='Hero2', age=21), Hero(name='Hero 3', secret_name='Hero3', age=29) ] hero_repository.bulk_create(my_heros_list)","title":"BULK CREATE operation"},{"location":"#get-operation","text":"GET operation simply gets a single record from the database. result = hero_repository.get(id=1, name='Github Hero') result variable will be an instance of Hero, if a result matches the criteria, or None type.","title":"GET operation"},{"location":"#filter-operation","text":"Gets one or more instances from the database, filtering them by one or more column/s. results = hero_repository.filter(age=31) results will be a List with zero or more elements.","title":"FILTER operation"},{"location":"#get-all-operation","text":"Gets all instances of given module from the Database results = hero_repository.get_all() results will be a List with zero or more elements.","title":"GET ALL operation"},{"location":"#update-operation","text":"Updates a record into the database. instance_to_update = hero_repository.get(id=1) instance_to_update.name = 'Super New Name' instance_to_update.age = 27 hero_repository.update(instance_to_update) The hero will have his columns name and age with updated values.","title":"UPDATE operation"},{"location":"#delete-operation","text":"Removes an instance from the database instance_to_remove = hero_repository.get(id=1) hero_repository.delete(instance_to_remove) The instance will be removed from the database.","title":"DELETE operation"},{"location":"#custom-repository","text":"If you want to extend the BaseRepository class with some custom methods, you can write your own repository class. Just extend BaseRepository or BaseCRUD class and call the super class constructor, by passing it two essential parameters: db : must be a Session instance; model : must be a Type[SQLModel]. from sqlmodel_basecrud import BaseRepository class MyCustomRepository(BaseRepository): def __init__(self, db: Session, model: Type[SQLModel]): super().__init__(model=model, db=db)","title":"Custom Repository"},{"location":"basecrud-reference/","text":"BaseCRUD BaseCRUD Bases: Generic [ ModelClass ] Simple class providing base CRUD operations on given Model __init__ ( model , db ) Class constructor Parameters: Name Type Description Default model Type [ ModelClass ] The model onto perform operations required db Session Database engine Session required bulk_create ( instances ) Insert multiple instances in the database Parameters: Name Type Description Default instances List [ ModelClass ] List of instances to be added into the Database required create ( instance ) Persists an item into the Database Parameters: Name Type Description Default instance SQLModel model to persist required Returns: Type Description Optional [ SQLModel ] Optional[SQLModel]: the created instance itself delete ( instance ) Removes an instance from the database Parameters: Name Type Description Default instance Type [ ModelClass ] the instance to remove required Returns: Name Type Description ModelClass Type [ ModelClass ] the instance removed filter ( offset = 0 , limit = 100 , * args , ** kwargs ) Gets one or more instances from the database, filtering them by one or more column Parameters: Name Type Description Default offset Optional [ int ] specifies the point from where to start returning data 0 limit Optional [ int ] parameter that limits the number of results 100 *args BinaryExpression filter args () **kwargs Any filter args {} Returns: Name Type Description List List [ Any ] List of retrieved items from the database get ( * args , ** kwargs ) Gets a single record from the database Parameters: Name Type Description Default *args BinaryExpression filter args () **kwargs Any filter args {} Returns: Type Description Optional [ ModelClass ] Optional[ModelClass]: the retrieved instance or None get_all () Gets all instances of given module from the Database Returns: Name Type Description List Optional [ List [ ModelClass ]] List of all instances of that model in the database. update ( instance ) Updates a record into database. It is equal to create data process, so it will call that method Parameters: Name Type Description Default instance SQLModel the instance to update required Returns: Name Type Description ModelClass Optional [ SQLModel ] the updated instance","title":"BaseCRUD"},{"location":"basecrud-reference/#basecrud","text":"","title":"BaseCRUD"},{"location":"basecrud-reference/#sqlmodel_basecrud.basecrud.BaseCRUD","text":"Bases: Generic [ ModelClass ] Simple class providing base CRUD operations on given Model","title":"BaseCRUD"},{"location":"basecrud-reference/#sqlmodel_basecrud.basecrud.BaseCRUD.__init__","text":"Class constructor Parameters: Name Type Description Default model Type [ ModelClass ] The model onto perform operations required db Session Database engine Session required","title":"__init__()"},{"location":"basecrud-reference/#sqlmodel_basecrud.basecrud.BaseCRUD.bulk_create","text":"Insert multiple instances in the database Parameters: Name Type Description Default instances List [ ModelClass ] List of instances to be added into the Database required","title":"bulk_create()"},{"location":"basecrud-reference/#sqlmodel_basecrud.basecrud.BaseCRUD.create","text":"Persists an item into the Database Parameters: Name Type Description Default instance SQLModel model to persist required Returns: Type Description Optional [ SQLModel ] Optional[SQLModel]: the created instance itself","title":"create()"},{"location":"basecrud-reference/#sqlmodel_basecrud.basecrud.BaseCRUD.delete","text":"Removes an instance from the database Parameters: Name Type Description Default instance Type [ ModelClass ] the instance to remove required Returns: Name Type Description ModelClass Type [ ModelClass ] the instance removed","title":"delete()"},{"location":"basecrud-reference/#sqlmodel_basecrud.basecrud.BaseCRUD.filter","text":"Gets one or more instances from the database, filtering them by one or more column Parameters: Name Type Description Default offset Optional [ int ] specifies the point from where to start returning data 0 limit Optional [ int ] parameter that limits the number of results 100 *args BinaryExpression filter args () **kwargs Any filter args {} Returns: Name Type Description List List [ Any ] List of retrieved items from the database","title":"filter()"},{"location":"basecrud-reference/#sqlmodel_basecrud.basecrud.BaseCRUD.get","text":"Gets a single record from the database Parameters: Name Type Description Default *args BinaryExpression filter args () **kwargs Any filter args {} Returns: Type Description Optional [ ModelClass ] Optional[ModelClass]: the retrieved instance or None","title":"get()"},{"location":"basecrud-reference/#sqlmodel_basecrud.basecrud.BaseCRUD.get_all","text":"Gets all instances of given module from the Database Returns: Name Type Description List Optional [ List [ ModelClass ]] List of all instances of that model in the database.","title":"get_all()"},{"location":"basecrud-reference/#sqlmodel_basecrud.basecrud.BaseCRUD.update","text":"Updates a record into database. It is equal to create data process, so it will call that method Parameters: Name Type Description Default instance SQLModel the instance to update required Returns: Name Type Description ModelClass Optional [ SQLModel ] the updated instance","title":"update()"},{"location":"baserepository-reference/","text":"BaseRepository BaseRepository Bases: BaseCRUD Base class for CRUD Operations __init__ ( db , model ) Constructor Parameters: Name Type Description Default db Session the database session required model Type [ SQLModel ] the model class that should be manipulated required","title":"BaseRepository"},{"location":"baserepository-reference/#baserepository","text":"","title":"BaseRepository"},{"location":"baserepository-reference/#sqlmodel_basecrud.baserepository.BaseRepository","text":"Bases: BaseCRUD Base class for CRUD Operations","title":"BaseRepository"},{"location":"baserepository-reference/#sqlmodel_basecrud.baserepository.BaseRepository.__init__","text":"Constructor Parameters: Name Type Description Default db Session the database session required model Type [ SQLModel ] the model class that should be manipulated required","title":"__init__()"}]}